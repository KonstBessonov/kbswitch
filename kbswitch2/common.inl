#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <tchar.h>

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

#pragma warning(error:4024)//different types for formal and actual parameter 

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

#ifdef _DEBUG
#define BUILD_SUFFIX "d"
#else
#define BUILD_SUFFIX ""
#endif

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

#ifdef _M_X64
#define PLATFORM_SUFFIX "x64"
#else
#define PLATFORM_SUFFIX "x86"
#endif

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

static const TCHAR QUIT_MESSAGE_NAME[]=_T("KBSWITCH_QUIT_MESSAGE");

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

static void dprintf(const char *fmt,...)
{
	char str[1000];
	va_list v;

	va_start(v,fmt);
	wvsprintfA(str,fmt,v);
	va_end(v);

	OutputDebugStringA(str);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

static void tdprintf(const TCHAR *fmt,...)
{
	TCHAR str[1000];
	va_list v;

	va_start(v,fmt);
	wvsprintf(str,fmt,v);
	va_end(v);

	OutputDebugString(str);
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

static void ResetMem(void *pMem,size_t n)
{
	size_t i;

	for(i=0;i<n;++i)
		((char *)pMem)[i]=0;
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

static void LogPrefix(void)
{
	HMODULE hModule;
	char fileName[500];
	DWORD pid;

#pragma warning(push)
#pragma warning(disable:4054)//'conversion' : from function pointer 'type1' to data pointer 'type2'
	GetModuleHandleExA(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,(LPCSTR)(void *)&LogPrefix,&hModule);
#pragma warning(pop)

	GetModuleFileNameA(hModule,fileName,sizeof fileName);
	fileName[sizeof fileName-1]=0;

	pid=GetCurrentProcessId();

	dprintf("\"%s\" (%lu): ",fileName,pid);
}

#define LOG(...) (LogPrefix(),dprintf(__VA_ARGS__),dprintf("\n"))

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
